// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorApp.Pwa.Shared.Components.Navigation
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "H:\Projects\firemanwayne\Blazor.Pwa\BlazorApp\Shared\Components\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "H:\Projects\firemanwayne\Blazor.Pwa\BlazorApp\Shared\Components\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "H:\Projects\firemanwayne\Blazor.Pwa\BlazorApp\Shared\Components\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
    public partial class SideBarItem : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 1 "H:\Projects\firemanwayne\Blazor.Pwa\BlazorApp\Shared\Components\Navigation\SideBarItem.razor"
       
    [Parameter] public string Name { get; set; } = "Placeholder";

    [Parameter] public string ModuleColor { get; set; } = "#217AA2";

    [Parameter] public string LogoName { get; set; } = "error";

    [Parameter] public bool IsLocked { get; set; } = false;

    [Parameter] public string HrefLink { get; set; }

    [Parameter] public IList<BarListItem> NavListItems { get; set; } = new List<BarListItem>();

    bool isUp;
    bool DisplayList { get; set; }
    string ParentHref { get; set; }

    const string ArrowUp = "keyboard_arrow_up";
    const string ArrowDown = "keyboard_arrow_down";

    bool IsUp
    {
        get => isUp;
        set
        {
            isUp = value;
            CurrentArrowDirection = value ? ArrowUp : ArrowDown;
        }
    }
    string CurrentArrowDirection { get; set; }

    protected override Task OnParametersSetAsync()
    {
        try
        {
            if (NavListItems.Count == 0)
                ParentHref = HrefLink;

            DisplayList = NavListItems.Count > 0;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        return Task.CompletedTask;
    }

    void ArrowClicked()
    {
        if (IsUp)
            IsUp = false;
        else
            IsUp = true;
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
